{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/firebase/hosting/src/components/ui/card.tsx"],"sourcesContent":["\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AACA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,6IAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,6IAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,6IAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,6IAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,6IAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,6IAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/firebase/hosting/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { db, getAdminDb } from '@/lib/firebase/config'; \nimport { getUserStroopSessions, saveStroopSession, type FetchedStroopSession, type StroopSessionData } from '@/lib/firebase/firestore-service';\n\n// This function is for the /firebase/hosting/src/app/actions.ts\n// It will be called by /firebase/hosting/src/app/dashboard/page.tsx or /firebase/hosting/src/app/test-page/page.tsx\nexport async function fetchUserSessions(userId: string | undefined): Promise<{\n  success: boolean;\n  data?: FetchedStroopSession[];\n  error?: string;\n}> {\n  console.log('[firebase/hosting/src/app/actions.ts] fetchUserSessions server action hit. Received userId:', userId);\n  if (!userId) {\n    console.error('[firebase/hosting/src/app/actions.ts] fetchUserSessions: No userId provided.');\n    return { success: false, error: 'User not authenticated or userId not provided for fetchUserSessions.' };\n  }\n  \n  try {\n    const result = await getUserStroopSessions(userId);\n    console.log('[firebase/hosting/src/app/actions.ts] getUserStroopSessions result from service (for fetchUserSessions):', result.success, result.data?.length, result.error);\n    return result; \n  } catch (error: any) {\n    console.error('[firebase/hosting/src/app/actions.ts] Error in fetchUserSessions calling getUserStroopSessions:', error);\n    const errorMessage = typeof error.message === 'string' ? error.message : 'An unexpected server error occurred in fetchUserSessions.';\n    return { success: false, error: errorMessage };\n  }\n}\n\n// This function is also for /firebase/hosting/src/app/actions.ts\n// Called by /firebase/hosting/src/app/test-page/page.tsx\nexport async function fetchTestDataForUser(userId: string | undefined): Promise<{\n  success: boolean;\n  data?: FetchedStroopSession[];\n  error?: string;\n}> {\n  console.log('[firebase/hosting/src/app/actions.ts] fetchTestDataForUser server action hit. Received userId:', userId);\n  if (!userId) {\n    console.error('[firebase/hosting/src/app/actions.ts] fetchTestDataForUser: No userId provided.');\n    return { success: false, error: 'User not authenticated or userId not provided for fetchTestDataForUser.' };\n  }\n  \n  try {\n    const result = await getUserStroopSessions(userId);\n    console.log('[firebase/hosting/src/app/actions.ts] getUserStroopSessions result from service (for fetchTestDataForUser):', result.success, result.data?.length, result.error);\n    return result;\n  } catch (error: any) {\n    console.error('[firebase/hosting/src/app/actions.ts] Error in fetchTestDataForUser calling getUserStroopSessions:', error);\n    const errorMessage = typeof error.message === 'string' ? error.message : 'An unexpected server error occurred in fetchTestDataForUser.';\n    return { success: false, error: errorMessage };\n  }\n}\n\nexport async function addMockStroopSessionForUser(userId: string | undefined): Promise<{\n  success: boolean;\n  error?: string;\n  sessionId?: string;\n}> {\n  console.log('[firebase/hosting/src/app/actions.ts] addMockStroopSessionForUser server action hit. Received userId:', userId);\n  if (!userId) {\n    console.error('[firebase/hosting/src/app/actions.ts] addMockStroopSessionForUser: No userId provided.');\n    return { success: false, error: 'User not authenticated or userId not provided.' };\n  }\n\n  const mockSessionData: Omit<StroopSessionData, 'userId' | 'timestamp'> & { timestamp: Date } = {\n    timestamp: new Date(),\n    // Round 1 Data\n    round1Id: \"wordMatch\",\n    round1Title: \"Mock Round 1: Match Word Meaning\",\n    round1Score: Math.floor(Math.random() * 18) + 7, // Score between 7-24\n    round1Trials: 25 + Math.floor(Math.random() * 6), // Trials between 25-30\n    round1AverageResponseTimeSeconds: parseFloat((Math.random() * 1.2 + 0.6).toFixed(2)), // Avg time 0.6s-1.8s\n    \n    // Round 2 Data\n    round2Id: \"colorMatch\",\n    round2Title: \"Mock Round 2: Match Font Color\",\n    round2Score: Math.floor(Math.random() * 15) + 5, // Score between 5-19\n    round2Trials: 20 + Math.floor(Math.random() * 6), // Trials between 20-25\n    round2AverageResponseTimeSeconds: parseFloat((Math.random() * 1.8 + 0.8).toFixed(2)), // Avg time 0.8s-2.6s\n    \n    overallAccuracy: Math.random(), \n    totalGameTimeSeconds: Math.floor(Math.random() * 60) + 120, \n  };\n\n  try {\n    const result = await saveStroopSession(userId, mockSessionData);\n    if (result.success) {\n      console.log(`[firebase/hosting/src/app/actions.ts] Mock session ${result.sessionId} added for user ${userId}`);\n    } else {\n      console.error(`[firebase/hosting/src/app/actions.ts] Failed to add mock session for user ${userId}:`, result.error);\n    }\n    return result;\n  } catch (error: any) {\n    console.error(`[firebase/hosting/src/app/actions.ts] Error in addMockStroopSessionForUser calling saveStroopSession for user ${userId}:`, error);\n    const errorMessage = typeof error.message === 'string' ? error.message : 'An unexpected server error occurred.';\n    return { success: false, error: errorMessage };\n  }\n}\n\nexport async function testAdminSDKConnection(): Promise<{ success: boolean; message: string; data?: any }> {\n  console.log('[actions.ts] testAdminSDKConnection server action hit.');\n  try {\n    const adminDb = await getAdminDb();\n    // Attempt to get a non-existent document. This still requires successful authentication.\n    const testDocRef = adminDb.collection('__admin_sdk_test_collection__').doc('__admin_sdk_test_doc__');\n    await testDocRef.get(); \n    // If the above line does not throw, it means the Admin SDK successfully authenticated and communicated with Firestore.\n    console.log('[actions.ts] Admin SDK connection test: Successfully performed a Firestore get operation.');\n    return { success: true, message: 'Admin SDK connected and performed a test Firestore read successfully.' };\n  } catch (error: any) {\n    console.error('[actions.ts] Admin SDK connection test FAILED:');\n    console.error(`  Message: ${error.message}`);\n    if (error.code) console.error(`  Code: ${error.code}`);\n    if (error.stack) console.error(`  Stack: ${error.stack}`);\n    \n    let clientErrorMessage = 'Admin SDK connection test failed.';\n    if (error.message) clientErrorMessage += ` Message: ${error.message}`;\n    if (error.code) clientErrorMessage += ` Code: ${error.code}`;\n    \n    // Attempt to serialize the error object safely for client-side display\n    let errorDetails = {};\n    try {\n      errorDetails = JSON.parse(JSON.stringify(error, Object.getOwnPropertyNames(error)));\n    } catch (e) {\n      errorDetails = { message: \"Could not serialize full error object.\" };\n    }\n\n    return { \n      success: false, \n      message: clientErrorMessage,\n      data: { errorDetails } \n    };\n  }\n}\n"],"names":[],"mappings":";;;;;;;;IAQsB;IAwBA;IAsBA;IA8CA","debugId":null}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/firebase/hosting/src/app/test-page/page.tsx"],"sourcesContent":["\n\"use client\";\n\nimport { useState } from \"react\";\nimport { useAuth } from \"@/contexts/auth-context\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n// AuthButton is now in the GlobalNavBar\n// import AuthButton from \"@/components/auth-button\"; \nimport { fetchTestDataForUser, addMockStroopSessionForUser, testAdminSDKConnection } from \"@/app/actions\"; \nimport type { FetchedStroopSession } from \"@/lib/firebase/firestore-service\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n\nexport default function TestPage() {\n  const { user, loading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const [displayMessage, setDisplayMessage] = useState<string | null>(null);\n  const [fetchedData, setFetchedData] = useState<FetchedStroopSession[] | null>(null);\n  const [dataLoading, setDataLoading] = useState(false);\n  const [dataError, setDataError] = useState<string | null>(null);\n  const [mockDataLoading, setMockDataLoading] = useState(false);\n  const [adminSDKTestResult, setAdminSDKTestResult] = useState<string | null>(null);\n  const [adminSDKTestLoading, setAdminSDKTestLoading] = useState(false);\n\n  const handleShowUserIdClick = () => {\n    if (authLoading) {\n      setDisplayMessage(\"Checking authentication status...\");\n    } else if (user) {\n      setDisplayMessage(`User ID: ${user.uid}`);\n    } else {\n      setDisplayMessage(\"Not Logged In\");\n    }\n  };\n\n  const handleFetchDataClick = async () => {\n    if (!user) {\n      setDataError(\"You must be logged in to fetch data.\");\n      setFetchedData(null);\n      return;\n    }\n    setDataLoading(true);\n    setDataError(null); \n    setFetchedData(null); \n    try {\n      const response = await fetchTestDataForUser(user.uid);\n      if (response.success && response.data) {\n        setFetchedData(response.data);\n        setDataError(null); \n      } else {\n        const errorMsg = typeof response.error === 'string' ? response.error : 'Failed to fetch data.';\n        setDataError(errorMsg);\n        setFetchedData(null);\n      }\n    } catch (error: any) {\n      setDataError(error.message || \"An unexpected error occurred.\");\n      setFetchedData(null);\n    }\n    setDataLoading(false);\n  };\n\n  const handleAddMockDataClick = async () => {\n    if (!user) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to add mock data.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setMockDataLoading(true);\n    setDataError(null); \n    try {\n      const response = await addMockStroopSessionForUser(user.uid);\n      if (response.success) {\n        toast({\n          title: \"Mock Data Added\",\n          description: `Session ID: ${response.sessionId} created for user ${user.uid}. Refreshing data...`,\n        });\n        await handleFetchDataClick(); \n      } else {\n        const errorMessage = typeof response.error === 'string' \n          ? response.error \n          : (response.error as any)?.message || \"An unknown error occurred while adding mock data.\";\n        setDataError(errorMessage); \n        toast({\n          title: \"Failed to Add Mock Data\",\n          description: errorMessage,\n          variant: \"destructive\",\n        });\n      }\n    } catch (error: any) {\n      const errorMessage = error.message || \"An unexpected error occurred while adding mock data.\";\n      setDataError(errorMessage); \n      toast({\n        title: \"Error Adding Mock Data\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    }\n    setMockDataLoading(false);\n  };\n\n  const handleTestAdminSDKConnection = async () => {\n    setAdminSDKTestLoading(true);\n    setAdminSDKTestResult(null);\n    try {\n      const result = await testAdminSDKConnection();\n      setAdminSDKTestResult(`Success: ${result.success}. Message: ${result.message}${result.data ? ` Details: ${JSON.stringify(result.data)}` : ''}`);\n    } catch (error: any) {\n      setAdminSDKTestResult(`Test failed: ${error.message || \"Unknown error\"}`);\n    }\n    setAdminSDKTestLoading(false);\n  };\n\n  return (\n    <main className=\"flex flex-1 flex-col items-center justify-center p-4 sm:p-6 md:p-8\">\n      <Card className=\"w-full max-w-md shadow-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl font-semibold text-center text-primary\">Auth & Data Test Page (Hosting)</CardTitle>\n          <CardDescription className=\"text-center\">Test authentication and user-specific data fetching.</CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex flex-col items-center space-y-6\">\n          <Button \n            onClick={handleShowUserIdClick} \n            disabled={authLoading}\n            className=\"w-full\"\n          >\n            {authLoading ? \"Loading Auth...\" : \"Show User Status\"}\n          </Button>\n          \n          {displayMessage && (\n            <div className=\"mt-4 p-3 bg-muted rounded-md text-center w-full\">\n              <p className=\"text-sm font-medium text-foreground\">{displayMessage}</p>\n            </div>\n          )}\n\n          <Button\n            onClick={handleTestAdminSDKConnection}\n            disabled={adminSDKTestLoading}\n            variant=\"secondary\"\n            className=\"w-full\"\n          >\n            {adminSDKTestLoading ? \"Testing Admin SDK...\" : \"Test Admin SDK Connection\"}\n          </Button>\n          {adminSDKTestResult && (\n            <div className={`mt-2 p-2 rounded-md text-xs w-full text-center ${adminSDKTestResult.startsWith(\"Success: true\") ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`}>\n              <pre className=\"whitespace-pre-wrap\">{adminSDKTestResult}</pre>\n            </div>\n          )}\n\n\n          <Button\n            onClick={handleFetchDataClick}\n            disabled={authLoading || !user || dataLoading}\n            className=\"w-full\"\n          >\n            {dataLoading ? \"Fetching Data...\" : \"Fetch My Stroop Data (Hosting Action)\"}\n          </Button>\n\n          <Button\n            onClick={handleAddMockDataClick}\n            disabled={authLoading || !user || mockDataLoading || dataLoading}\n            variant=\"outline\"\n            className=\"w-full\"\n          >\n            {mockDataLoading ? \"Adding Mock Data...\" : \"Add Mock Session Data\"}\n          </Button>\n\n          {dataLoading && <p className=\"text-sm text-muted-foreground\">Loading data...</p>}\n          \n          {dataError && !dataLoading && ( \n            <div className=\"mt-4 p-3 bg-destructive/10 rounded-md text-center w-full\">\n              <p className=\"text-sm font-medium text-destructive\">{dataError}</p>\n            </div>\n          )}\n\n          {fetchedData && !dataLoading && (\n            <Card className=\"mt-4 w-full\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Fetched Stroop Sessions ({fetchedData.length})</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {fetchedData.length > 0 ? (\n                  <ul className=\"list-disc pl-5 text-sm\">\n                    {fetchedData.map((session) => (\n                      <li key={session.id}>\n                        ID: {session.id.substring(0, 8)}... - Score (R1): {session.round1Score ?? 'N/A'}\n                      </li>\n                    ))}\n                  </ul>\n                ) : (\n                  <p className=\"text-sm text-muted-foreground\">No sessions found for this user.</p>\n                )}\n              </CardContent>\n            </Card>\n          )}\n        </CardContent>\n      </Card>\n    </main>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 465, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/next/src/build/webpack/loaders/next-flight-loader/action-client-wrapper.ts"],"sourcesContent":["// This file must be bundled in the app's client layer, it shouldn't be directly\n// imported by the server.\n\nexport { callServer } from 'next/dist/client/app-call-server'\nexport { findSourceMapURL } from 'next/dist/client/app-find-source-map-url'\n\n// A noop wrapper to let the Flight client create the server reference.\n// See also: https://github.com/facebook/react/pull/26632\n// Since we're using the Edge build of Flight client for SSR [1], here we need to\n// also use the same Edge build to create the reference. For the client bundle,\n// we use the default and let Webpack to resolve it to the correct version.\n// 1: https://github.com/vercel/next.js/blob/16eb80b0b0be13f04a6407943664b5efd8f3d7d0/packages/next/src/server/app-render/use-flight-response.tsx#L24-L26\nexport const createServerReference = (\n  (!!process.env.NEXT_RUNTIME\n    ? // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client.edge')\n    : // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client')) as typeof import('react-server-dom-webpack/client')\n).createServerReference\n"],"names":["callServer","createServerReference","findSourceMapURL","process","env","NEXT_RUNTIME","require"],"mappings":"AAAA,gFAAgF;AAChF,0BAA0B;AAYrBG,QAAQC,GAAG,CAACC,YAAY,GAEvBC,QAAQ,0CAERA,QAAQ;;;;;;;;;;;;;;;;;IAdLN,UAAU,EAAA;eAAVA,eAAAA,UAAU;;IASNC,qBAAqB,EAAA;eAArBA;;IARJC,gBAAgB,EAAA;eAAhBA,qBAAAA,gBAAgB;;;+BADE;qCACM;AAQ1B,MAAMD,wBACV,CAAA,CAAC,+MAI2C,EAC7CA,qBAAqB","ignoreList":[0],"debugId":null}}]
}