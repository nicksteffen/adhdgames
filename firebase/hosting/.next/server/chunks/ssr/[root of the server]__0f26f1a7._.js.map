{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/firebase/hosting/src/lib/firebase/config.ts"],"sourcesContent":["\n// Import the functions you need from the SDKs you need\nimport { initializeApp, getApp, getApps, type FirebaseApp } from \"firebase/app\";\nimport { getAuth, type Auth } from \"firebase/auth\";\nimport { getFirestore as getClientFirestore, type Firestore as ClientFirestore } from \"firebase/firestore\"; // Renamed client Firestore\nimport { getAnalytics, type Analytics } from \"firebase/analytics\";\n\n// Import Firebase Admin SDK\nimport admin from 'firebase-admin';\nimport type { App as AdminApp, Firestore as AdminFirestore } from 'firebase-admin/app';\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey:\"AIzaSyCyIj3n7Ned3CycN1LuuNze0avQil8yjI8\",\n  authDomain:\"adhdgames-15570.firebaseapp.com\",\n  projectId: \"adhdgames-15570\",\n  storageBucket: \"adhdgames-15570.firebasestorage.app\",\n  messagingSenderId: \"32647423969\",\n  appId: \"1:32647423969:web:b72420acb51a82545754a0\",\n  measurementId: \"G-W5KQ1PX5B4\"\n};\n\n// Client Firebase App Initialization\nlet app: FirebaseApp;\nif (!getApps().length) {\n  app = initializeApp(firebaseConfig);\n} else {\n  app = getApp();\n}\n\nconst auth: Auth = getAuth(app);\nconst db: ClientFirestore = getClientFirestore(app); // This is the client Firestore instance\n\nlet analytics: Analytics | null = null;\nif (typeof window !== 'undefined') {\n  try {\n    analytics = getAnalytics(app);\n  } catch (error) {\n    console.error(\"Failed to initialize Firebase Analytics\", error);\n  }\n}\n\n// Firebase Admin SDK Initialization\nlet adminApp: AdminApp;\nlet adminDb: AdminFirestore;\n\nif (!admin.apps.length) {\n  // For local development, you would typically use a service account:\n  // import serviceAccount from './path/to/your/serviceAccountKey.json'; // YOU NEED TO PROVIDE THIS\n  // adminApp = admin.initializeApp({\n  //   credential: admin.credential.cert(serviceAccount),\n  //   // databaseURL: `https://${firebaseConfig.projectId}.firebaseio.com` // Optional if using default\n  // });\n  //\n  // On Firebase App Hosting or Cloud Functions, it initializes with Application Default Credentials:\n  adminApp = admin.initializeApp();\n  console.log('[config.ts] Firebase Admin SDK initialized without explicit credentials (expected for App Hosting).');\n} else {\n  adminApp = admin.app();\n  console.log('[config.ts] Firebase Admin SDK already initialized.');\n}\n\nadminDb = adminApp.firestore();\n\nexport { app, auth, db, analytics, adminDb, adminApp }; // Export adminDb and adminApp\n"],"names":[],"mappings":"AACA,uDAAuD;;;;;;;;;AACvD;AAAA;AACA;AAAA;AACA,0TAA4G,2BAA2B;AAAvI;AACA;AAEA,4BAA4B;AAC5B;;;;;;AAGA,4DAA4D;AAC5D,iEAAiE;AAEjE,wCAAwC;AACxC,mEAAmE;AACnE,MAAM,iBAAiB;IACrB,QAAO;IACP,YAAW;IACX,WAAW;IACX,eAAe;IACf,mBAAmB;IACnB,OAAO;IACP,eAAe;AACjB;AAEA,qCAAqC;AACrC,IAAI;AACJ,IAAI,CAAC,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;IACrB,MAAM,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE;AACtB,OAAO;IACL,MAAM,CAAA,GAAA,oLAAA,CAAA,SAAM,AAAD;AACb;AAEA,MAAM,OAAa,CAAA,GAAA,yOAAA,CAAA,UAAO,AAAD,EAAE;AAC3B,MAAM,KAAsB,CAAA,GAAA,iKAAA,CAAA,eAAkB,AAAD,EAAE,MAAM,wCAAwC;AAE7F,IAAI,YAA8B;AAClC,uCAAmC;;AAMnC;AAEA,oCAAoC;AACpC,IAAI;AACJ,IAAI;AAEJ,IAAI,CAAC,2HAAA,CAAA,UAAK,CAAC,IAAI,CAAC,MAAM,EAAE;IACtB,oEAAoE;IACpE,kGAAkG;IAClG,mCAAmC;IACnC,uDAAuD;IACvD,sGAAsG;IACtG,MAAM;IACN,EAAE;IACF,mGAAmG;IACnG,WAAW,2HAAA,CAAA,UAAK,CAAC,aAAa;IAC9B,QAAQ,GAAG,CAAC;AACd,OAAO;IACL,WAAW,2HAAA,CAAA,UAAK,CAAC,GAAG;IACpB,QAAQ,GAAG,CAAC;AACd;AAEA,UAAU,SAAS,SAAS;;CAE4B,8BAA8B","debugId":null}},
    {"offset": {"line": 203, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/firebase/hosting/src/lib/firebase/firestore-service.ts"],"sourcesContent":["\n'use server';\n\nimport { db as clientDb, adminDb } from './config'; // Import both client and admin Firestore instances\nimport type { User } from 'firebase/auth';\nimport {\n  collection,\n  addDoc,\n  query,\n  where,\n  orderBy,\n  getDocs,\n  Timestamp as ClientTimestamp, // Alias to avoid conflict if admin also has Timestamp\n  DocumentData,\n} from 'firebase/firestore';\nimport type { Timestamp as AdminTimestamp } from 'firebase-admin/firestore';\n\n\nexport interface RoundResultData {\n  roundId: string;\n  title: string;\n  score: number;\n  trials: number;\n  averageResponseTimeSeconds: number;\n}\n\nexport interface StroopSessionData {\n  userId: string;\n  timestamp: ClientTimestamp | AdminTimestamp | Date; \n  [key: string]: any;\n}\n\nexport interface FetchedStroopSession extends DocumentData {\n  id: string;\n  userId: string;\n  timestamp: ClientTimestamp | AdminTimestamp; // Firestore Timestamps can be from client or admin SDK\n  [key: string]: any;\n}\n\nexport async function saveStroopSession(\n  userId: string,\n  sessionData: Omit<StroopSessionData, 'userId' | 'timestamp'> & { timestamp: Date }\n): Promise<{ success: boolean; error?: any; sessionId?: string }> {\n  if (!userId) {\n    console.error('[firestore-service] User ID is required to save session.');\n    return { success: false, error: 'User ID is required.' };\n  }\n  try {\n    const sessionToSave: StroopSessionData = {\n      ...sessionData,\n      userId, \n      timestamp: sessionData.timestamp, // Keep as JS Date, Admin SDK handles conversion\n    };\n    console.log(`[firestore-service - admin] Attempting to save session for userId: ${userId}. Data to save:`, JSON.stringify(sessionToSave, null, 2));\n    \n    // Using Admin SDK for this server-side write\n    const docRef = await adminDb.collection('users').doc(userId).collection('stroopSessions').add(sessionToSave);\n    console.log(`[firestore-service - admin] Session saved successfully for userId: ${userId}, sessionId: ${docRef.id}`);\n    return { success: true, sessionId: docRef.id };\n  } catch (error: any) {\n    console.error(`[firestore-service - admin] Error saving Stroop session for userId: ${userId}. Error:`, error);\n    const clientError: { message: string; code?: string; details?: string } = {\n      message: typeof error.message === 'string' ? error.message : 'Failed to save session.',\n      code: typeof error.code === 'string' ? error.code : 'UNKNOWN_SAVE_ERROR',\n      details: error.details || (error.toString ? error.toString() : \"No additional details\")\n    };\n    return { success: false, error: clientError };\n  }\n}\n\nexport async function getUserStroopSessions(\n  userId: string\n): Promise<{ success: boolean; data?: FetchedStroopSession[]; error?: string }> { \n  console.log('[firestore-service - admin] Attempting to fetch sessions for userId:', userId);\n  if (!userId) {\n    console.error('[firestore-service - admin] User ID is required to fetch sessions.');\n     return { success: false, error: 'User ID is required.' };\n  }\n  try {\n    // Using Admin SDK for this server-side read. This bypasses security rules.\n    const sessionsColRef = adminDb.collection('users').doc(userId).collection('stroopSessions');\n    const q = sessionsColRef.orderBy('timestamp', 'desc');\n    console.log('[firestore-service - admin] Executing query for path:', `users/${userId}/stroopSessions with orderBy timestamp desc`);\n    \n    const querySnapshot = await q.get();\n    console.log(`[firestore-service - admin] Query snapshot received. Empty: ${querySnapshot.empty}. Size: ${querySnapshot.size}`);\n    \n    const sessions: FetchedStroopSession[] = [];\n    querySnapshot.forEach((doc) => {\n      // Data from Admin SDK will have Admin Timestamps. Cast as FetchedStroopSession.\n      sessions.push({ id: doc.id, ...doc.data() } as FetchedStroopSession);\n    });\n    console.log(`[firestore-service - admin] Fetched ${sessions.length} sessions for userId: ${userId}`);\n    return { success: true, data: sessions };\n  } catch (error: any) {\n    const errorMessage = typeof error.message === 'string' ? error.message : 'An unexpected error occurred while fetching data.';\n    const errorCode = typeof error.code === 'string' ? error.code : 'UNKNOWN_FETCH_ERROR';\n    \n    console.error(\n      `[firestore-service - admin] Error fetching user Stroop sessions for userId: ${userId}. Code: ${errorCode}, Message: ${errorMessage}`,\n      { originalErrorObjectDetails: JSON.stringify(error, Object.getOwnPropertyNames(error)) }\n    );\n    \n    return { success: false, error: errorMessage };\n  }\n}\n"],"names":[],"mappings":";;;;;;AAGA,uQAAoD,mDAAmD;;;;;AAoChG,eAAe,uCAAe,GAAf,kBACpB,MAAc,EACd,WAAkF;IAElF,IAAI,CAAC,QAAQ;QACX,QAAQ,KAAK,CAAC;QACd,OAAO;YAAE,SAAS;YAAO,OAAO;QAAuB;IACzD;IACA,IAAI;QACF,MAAM,gBAAmC;YACvC,GAAG,WAAW;YACd;YACA,WAAW,YAAY,SAAS;QAClC;QACA,QAAQ,GAAG,CAAC,CAAC,mEAAmE,EAAE,OAAO,eAAe,CAAC,EAAE,KAAK,SAAS,CAAC,eAAe,MAAM;QAE/I,6CAA6C;QAC7C,MAAM,SAAS,MAAM,uJAAA,CAAA,UAAO,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC,QAAQ,UAAU,CAAC,kBAAkB,GAAG,CAAC;QAC9F,QAAQ,GAAG,CAAC,CAAC,mEAAmE,EAAE,OAAO,aAAa,EAAE,OAAO,EAAE,EAAE;QACnH,OAAO;YAAE,SAAS;YAAM,WAAW,OAAO,EAAE;QAAC;IAC/C,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,CAAC,oEAAoE,EAAE,OAAO,QAAQ,CAAC,EAAE;QACvG,MAAM,cAAoE;YACxE,SAAS,OAAO,MAAM,OAAO,KAAK,WAAW,MAAM,OAAO,GAAG;YAC7D,MAAM,OAAO,MAAM,IAAI,KAAK,WAAW,MAAM,IAAI,GAAG;YACpD,SAAS,MAAM,OAAO,IAAI,CAAC,MAAM,QAAQ,GAAG,MAAM,QAAQ,KAAK,uBAAuB;QACxF;QACA,OAAO;YAAE,SAAS;YAAO,OAAO;QAAY;IAC9C;AACF;AAEO,eAAe,uCAAmB,GAAnB,sBACpB,MAAc;IAEd,QAAQ,GAAG,CAAC,wEAAwE;IACpF,IAAI,CAAC,QAAQ;QACX,QAAQ,KAAK,CAAC;QACb,OAAO;YAAE,SAAS;YAAO,OAAO;QAAuB;IAC1D;IACA,IAAI;QACF,2EAA2E;QAC3E,MAAM,iBAAiB,uJAAA,CAAA,UAAO,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC,QAAQ,UAAU,CAAC;QAC1E,MAAM,IAAI,eAAe,OAAO,CAAC,aAAa;QAC9C,QAAQ,GAAG,CAAC,yDAAyD,CAAC,MAAM,EAAE,OAAO,2CAA2C,CAAC;QAEjI,MAAM,gBAAgB,MAAM,EAAE,GAAG;QACjC,QAAQ,GAAG,CAAC,CAAC,4DAA4D,EAAE,cAAc,KAAK,CAAC,QAAQ,EAAE,cAAc,IAAI,EAAE;QAE7H,MAAM,WAAmC,EAAE;QAC3C,cAAc,OAAO,CAAC,CAAC;YACrB,gFAAgF;YAChF,SAAS,IAAI,CAAC;gBAAE,IAAI,IAAI,EAAE;gBAAE,GAAG,IAAI,IAAI,EAAE;YAAC;QAC5C;QACA,QAAQ,GAAG,CAAC,CAAC,oCAAoC,EAAE,SAAS,MAAM,CAAC,sBAAsB,EAAE,QAAQ;QACnG,OAAO;YAAE,SAAS;YAAM,MAAM;QAAS;IACzC,EAAE,OAAO,OAAY;QACnB,MAAM,eAAe,OAAO,MAAM,OAAO,KAAK,WAAW,MAAM,OAAO,GAAG;QACzE,MAAM,YAAY,OAAO,MAAM,IAAI,KAAK,WAAW,MAAM,IAAI,GAAG;QAEhE,QAAQ,KAAK,CACX,CAAC,4EAA4E,EAAE,OAAO,QAAQ,EAAE,UAAU,WAAW,EAAE,cAAc,EACrI;YAAE,4BAA4B,KAAK,SAAS,CAAC,OAAO,OAAO,mBAAmB,CAAC;QAAQ;QAGzF,OAAO;YAAE,SAAS;YAAO,OAAO;QAAa;IAC/C;AACF;;;IAlEsB;IA+BA;;AA/BA,+OAAA;AA+BA,+OAAA","debugId":null}},
    {"offset": {"line": 303, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/firebase/hosting/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { db } from '@/lib/firebase/config'; \nimport { getUserStroopSessions, saveStroopSession, type FetchedStroopSession, type StroopSessionData } from '@/lib/firebase/firestore-service';\n\n// This function is for the /firebase/hosting/src/app/actions.ts\n// It will be called by /firebase/hosting/src/app/dashboard/page.tsx or /firebase/hosting/src/app/test-page/page.tsx\nexport async function fetchUserSessions(userId: string | undefined): Promise<{\n  success: boolean;\n  data?: FetchedStroopSession[];\n  error?: string;\n}> {\n  console.log('[firebase/hosting/src/app/actions.ts] fetchUserSessions server action hit. Received userId:', userId);\n  if (!userId) {\n    console.error('[firebase/hosting/src/app/actions.ts] fetchUserSessions: No userId provided.');\n    return { success: false, error: 'User not authenticated or userId not provided for fetchUserSessions.' };\n  }\n  \n  try {\n    const result = await getUserStroopSessions(userId);\n    console.log('[firebase/hosting/src/app/actions.ts] getUserStroopSessions result from service (for fetchUserSessions):', result.success, result.data?.length, result.error);\n    return result; \n  } catch (error: any) {\n    console.error('[firebase/hosting/src/app/actions.ts] Error in fetchUserSessions calling getUserStroopSessions:', error);\n    const errorMessage = typeof error.message === 'string' ? error.message : 'An unexpected server error occurred in fetchUserSessions.';\n    return { success: false, error: errorMessage };\n  }\n}\n\n// This function is also for /firebase/hosting/src/app/actions.ts\n// Called by /firebase/hosting/src/app/test-page/page.tsx\nexport async function fetchTestDataForUser(userId: string | undefined): Promise<{\n  success: boolean;\n  data?: FetchedStroopSession[];\n  error?: string;\n}> {\n  console.log('[firebase/hosting/src/app/actions.ts] fetchTestDataForUser server action hit. Received userId:', userId);\n  if (!userId) {\n    console.error('[firebase/hosting/src/app/actions.ts] fetchTestDataForUser: No userId provided.');\n    return { success: false, error: 'User not authenticated or userId not provided for fetchTestDataForUser.' };\n  }\n  \n  try {\n    const result = await getUserStroopSessions(userId);\n    console.log('[firebase/hosting/src/app/actions.ts] getUserStroopSessions result from service (for fetchTestDataForUser):', result.success, result.data?.length, result.error);\n    return result;\n  } catch (error: any) {\n    console.error('[firebase/hosting/src/app/actions.ts] Error in fetchTestDataForUser calling getUserStroopSessions:', error);\n    const errorMessage = typeof error.message === 'string' ? error.message : 'An unexpected server error occurred in fetchTestDataForUser.';\n    return { success: false, error: errorMessage };\n  }\n}\n\nexport async function addMockStroopSessionForUser(userId: string | undefined): Promise<{\n  success: boolean;\n  error?: string;\n  sessionId?: string;\n}> {\n  console.log('[firebase/hosting/src/app/actions.ts] addMockStroopSessionForUser server action hit. Received userId:', userId);\n  if (!userId) {\n    console.error('[firebase/hosting/src/app/actions.ts] addMockStroopSessionForUser: No userId provided.');\n    return { success: false, error: 'User not authenticated or userId not provided.' };\n  }\n\n  const mockSessionData: Omit<StroopSessionData, 'userId' | 'timestamp'> & { timestamp: Date } = {\n    timestamp: new Date(),\n    // Round 1 Data\n    round1Id: \"wordMatch\",\n    round1Title: \"Mock Round 1: Match Word Meaning\",\n    round1Score: Math.floor(Math.random() * 18) + 7, // Score between 7-24\n    round1Trials: 25 + Math.floor(Math.random() * 6), // Trials between 25-30\n    round1AverageResponseTimeSeconds: parseFloat((Math.random() * 1.2 + 0.6).toFixed(2)), // Avg time 0.6s-1.8s\n    \n    // Round 2 Data\n    round2Id: \"colorMatch\",\n    round2Title: \"Mock Round 2: Match Font Color\",\n    round2Score: Math.floor(Math.random() * 15) + 5, // Score between 5-19\n    round2Trials: 20 + Math.floor(Math.random() * 6), // Trials between 20-25\n    round2AverageResponseTimeSeconds: parseFloat((Math.random() * 1.8 + 0.8).toFixed(2)), // Avg time 0.8s-2.6s\n    \n    overallAccuracy: Math.random(), // Example additional field\n    totalGameTimeSeconds: Math.floor(Math.random() * 60) + 120, // Example additional field\n  };\n\n  try {\n    const result = await saveStroopSession(userId, mockSessionData);\n    if (result.success) {\n      console.log(`[firebase/hosting/src/app/actions.ts] Mock session ${result.sessionId} added for user ${userId}`);\n    } else {\n      console.error(`[firebase/hosting/src/app/actions.ts] Failed to add mock session for user ${userId}:`, result.error);\n    }\n    return result;\n  } catch (error: any) {\n    console.error(`[firebase/hosting/src/app/actions.ts] Error in addMockStroopSessionForUser calling saveStroopSession for user ${userId}:`, error);\n    const errorMessage = typeof error.message === 'string' ? error.message : 'An unexpected server error occurred.';\n    return { success: false, error: errorMessage };\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 417, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 468, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/firebase/hosting/src/app/test-page/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/firebase/hosting/src/app/test-page/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/firebase/hosting/src/app/test-page/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+S,GAC5U,6EACA","debugId":null}},
    {"offset": {"line": 482, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/firebase/hosting/src/app/test-page/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/firebase/hosting/src/app/test-page/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/firebase/hosting/src/app/test-page/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2R,GACxT,yDACA","debugId":null}},
    {"offset": {"line": 496, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}