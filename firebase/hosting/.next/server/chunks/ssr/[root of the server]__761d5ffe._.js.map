{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/firebase/hosting/src/lib/firebase/config.ts"],"sourcesContent":["\n// Import the functions you need from the SDKs you need\nimport { initializeApp, getApp, getApps, type FirebaseApp } from \"firebase/app\";\nimport { getAuth, type Auth } from \"firebase/auth\";\nimport { getFirestore as getClientFirestore, type Firestore as ClientFirestore } from \"firebase/firestore\";\nimport { getAnalytics, type Analytics } from \"firebase/analytics\";\n\n// Client Firebase App Initialization (remains the same)\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCyIj3n7Ned3CycN1LuuNze0avQil8yjI8\",\n  authDomain: \"adhdgames-15570.firebaseapp.com\",\n  projectId: \"adhdgames-15570\",\n  storageBucket: \"adhdgames-15570.firebasestorage.app\",\n  messagingSenderId: \"32647423969\",\n  appId: \"1:32647423969:web:b72420acb51a82545754a0\",\n  measurementId: \"G-W5KQ1PX5B4\"\n};\n\nlet app: FirebaseApp;\nif (!getApps().length) {\n  app = initializeApp(firebaseConfig);\n} else {\n  app = getApp();\n}\n\nconst auth: Auth = getAuth(app);\nconst db: ClientFirestore = getClientFirestore(app); // This is the client Firestore instance\n\nlet analytics: Analytics | null = null;\nif (typeof window !== 'undefined') {\n  try {\n    analytics = getAnalytics(app);\n  } catch (error) {\n    console.error(\"Failed to initialize Firebase Analytics\", error);\n  }\n}\n\n// Admin SDK - to be initialized and used only on the server\nlet adminAppInstance: import('firebase-admin/app').App | null = null;\nlet adminDbInstance: import('firebase-admin/firestore').Firestore | null = null;\n\nasync function initializeAdminSDK() {\n  if (typeof window !== 'undefined') {\n    // This function should ideally not even be callable from client-side code.\n    // The dynamic import below is the primary guard.\n    console.warn(\"Attempted to initialize Firebase Admin SDK on the client. This is a misconfiguration.\");\n    return;\n  }\n  if (!adminAppInstance) {\n    // Dynamically import firebase-admin ONLY on the server\n    const admin = (await import('firebase-admin')).default;\n    if (!admin.apps.length) {\n      // For Firebase App Hosting, initializeApp() without arguments works.\n      // For local dev, GOOGLE_APPLICATION_CREDENTIALS env var should be set.\n      // If you need to explicitly pass credentials (e.g., for local dev without env var):\n      // const serviceAccount = require('/path/to/your/serviceAccountKey.json'); // Adjust path as needed\n      // adminAppInstance = admin.initializeApp({ credential: admin.credential.cert(serviceAccount) });\n      adminAppInstance = admin.initializeApp();\n      console.log('[config.ts] Firebase Admin SDK initialized.');\n    } else {\n      adminAppInstance = admin.app();\n      console.log('[config.ts] Firebase Admin SDK already initialized.');\n    }\n    adminDbInstance = adminAppInstance.firestore();\n  }\n}\n\n// Getter for Admin DB to ensure it's initialized (server-side only)\nexport async function getAdminDb(): Promise<import('firebase-admin/firestore').Firestore> {\n  if (typeof window !== 'undefined') {\n    throw new Error(\"Firebase Admin SDK (getAdminDb) can only be used on the server.\");\n  }\n  if (!adminDbInstance) {\n    await initializeAdminSDK();\n  }\n  if (!adminDbInstance) {\n    // This case should ideally be prevented by initializeAdminSDK's logic\n    throw new Error(\"Firebase Admin SDK Firestore instance could not be initialized or is not yet available.\");\n  }\n  return adminDbInstance;\n}\n\nexport async function getAdminApp(): Promise<import('firebase-admin/app').App> {\n  if (typeof window !== 'undefined') {\n    throw new Error(\"Firebase Admin SDK (getAdminApp) can only be used on the server.\");\n  }\n  if (!adminAppInstance) {\n    await initializeAdminSDK();\n  }\n  if (!adminAppInstance) {\n     // This case should ideally be prevented by initializeAdminSDK's logic\n    throw new Error(\"Firebase Admin SDK App instance could not be initialized or is not yet available.\");\n  }\n  return adminAppInstance;\n}\n\n// Export client SDK instances directly\nexport { app, auth, db, analytics };\n"],"names":[],"mappings":"AACA,uDAAuD;;;;;;;;;AACvD;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;AAEA,wDAAwD;AACxD,MAAM,iBAAiB;IACrB,QAAQ;IACR,YAAY;IACZ,WAAW;IACX,eAAe;IACf,mBAAmB;IACnB,OAAO;IACP,eAAe;AACjB;AAEA,IAAI;AACJ,IAAI,CAAC,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;IACrB,MAAM,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE;AACtB,OAAO;IACL,MAAM,CAAA,GAAA,oLAAA,CAAA,SAAM,AAAD;AACb;AAEA,MAAM,OAAa,CAAA,GAAA,yOAAA,CAAA,UAAO,AAAD,EAAE;AAC3B,MAAM,KAAsB,CAAA,GAAA,iKAAA,CAAA,eAAkB,AAAD,EAAE,MAAM,wCAAwC;AAE7F,IAAI,YAA8B;AAClC,uCAAmC;;AAMnC;AAEA,4DAA4D;AAC5D,IAAI,mBAA4D;AAChE,IAAI,kBAAuE;AAE3E,eAAe;IACb,uCAAmC;;IAKnC;IACA,IAAI,CAAC,kBAAkB;QACrB,uDAAuD;QACvD,MAAM,QAAQ,CAAC,mIAA8B,EAAE,OAAO;QACtD,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,EAAE;YACtB,qEAAqE;YACrE,uEAAuE;YACvE,oFAAoF;YACpF,mGAAmG;YACnG,iGAAiG;YACjG,mBAAmB,MAAM,aAAa;YACtC,QAAQ,GAAG,CAAC;QACd,OAAO;YACL,mBAAmB,MAAM,GAAG;YAC5B,QAAQ,GAAG,CAAC;QACd;QACA,kBAAkB,iBAAiB,SAAS;IAC9C;AACF;AAGO,eAAe;IACpB,uCAAmC;;IAEnC;IACA,IAAI,CAAC,iBAAiB;QACpB,MAAM;IACR;IACA,IAAI,CAAC,iBAAiB;QACpB,sEAAsE;QACtE,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;AAEO,eAAe;IACpB,uCAAmC;;IAEnC;IACA,IAAI,CAAC,kBAAkB;QACrB,MAAM;IACR;IACA,IAAI,CAAC,kBAAkB;QACpB,sEAAsE;QACvE,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/firebase/hosting/src/lib/firebase/firestore-service.ts"],"sourcesContent":["\n'use server';\n\nimport { getAdminDb } from './config';\n// We might still need ClientTimestamp for type consistency if FetchedStroopSession is used by client components\n// that receive data originally fetched by the admin SDK.\nimport type { Timestamp as ClientTimestamp } from 'firebase/firestore';\nimport type { Timestamp as AdminTimestamp, DocumentData } from 'firebase-admin/firestore';\n\n\nexport interface RoundResultData {\n  roundId: string;\n  title: string;\n  score: number;\n  trials: number;\n  averageResponseTimeSeconds: number;\n}\n\nexport interface StroopSessionData {\n  userId: string;\n  timestamp: AdminTimestamp | Date; // Admin SDK handles Date conversion to its Timestamp\n  [key: string]: any;\n}\n\nexport interface FetchedStroopSession extends DocumentData {\n  id: string;\n  userId: string;\n  timestamp: AdminTimestamp | ClientTimestamp; // Can be either depending on where it's read/hydrated\n  [key: string]: any;\n}\n\nexport async function saveStroopSession(\n  userId: string,\n  sessionData: Omit<StroopSessionData, 'userId' | 'timestamp'> & { timestamp: Date }\n): Promise<{ success: boolean; error?: any; sessionId?: string }> {\n  if (!userId) {\n    console.error('[firestore-service] User ID is required to save session.');\n    return { success: false, error: 'User ID is required.' };\n  }\n  try {\n    const adminDbInstance = await getAdminDb(); // Get adminDb instance\n    const sessionToSave: StroopSessionData = {\n      ...sessionData,\n      userId,\n      timestamp: sessionData.timestamp, // Pass JS Date; Admin SDK converts it\n    };\n    console.log(`[firestore-service - admin] Attempting to save session for userId: ${userId}. Data to save:`, JSON.stringify(sessionToSave, null, 2));\n    \n    const docRef = await adminDbInstance.collection('users').doc(userId).collection('stroopSessions').add(sessionToSave);\n    console.log(`[firestore-service - admin] Session saved successfully for userId: ${userId}, sessionId: ${docRef.id}`);\n    return { success: true, sessionId: docRef.id };\n  } catch (error: any) {\n    console.error(`[firestore-service - admin] Error saving Stroop session for userId: ${userId}. Error:`, error);\n    const clientError: { message: string; code?: string; details?: string } = {\n      message: typeof error.message === 'string' ? error.message : 'Failed to save session.',\n      code: typeof error.code === 'string' ? error.code : 'UNKNOWN_SAVE_ERROR',\n      details: error.details || (error.toString ? error.toString() : \"No additional details\")\n    };\n    return { success: false, error: clientError };\n  }\n}\n\nexport async function getUserStroopSessions(\n  userId: string\n): Promise<{ success: boolean; data?: FetchedStroopSession[]; error?: string }> { \n  console.log('[firestore-service - admin] Attempting to fetch sessions for userId:', userId);\n  if (!userId) {\n    console.error('[firestore-service - admin] User ID is required to fetch sessions.');\n     return { success: false, error: 'User ID is required.' };\n  }\n  try {\n    const adminDbInstance = await getAdminDb(); // Get adminDb instance\n    const sessionsColRef = adminDbInstance.collection('users').doc(userId).collection('stroopSessions');\n    const q = sessionsColRef.orderBy('timestamp', 'desc');\n    console.log('[firestore-service - admin] Executing query for path:', `users/${userId}/stroopSessions with orderBy timestamp desc`);\n    \n    const querySnapshot = await q.get();\n    console.log(`[firestore-service - admin] Query snapshot received. Empty: ${querySnapshot.empty}. Size: ${querySnapshot.size}`);\n    \n    const sessions: FetchedStroopSession[] = [];\n    querySnapshot.forEach((doc) => {\n      const docData = doc.data();\n      // Data from Admin SDK will have AdminTimestamps.\n      // The FetchedStroopSession type allows for AdminTimestamp.\n      sessions.push({\n        id: doc.id,\n        ...docData,\n        timestamp: docData.timestamp as AdminTimestamp, // Explicit cast for clarity\n      } as FetchedStroopSession); // Final cast to ensure type alignment\n    });\n    console.log(`[firestore-service - admin] Fetched ${sessions.length} sessions for userId: ${userId}`);\n    return { success: true, data: sessions };\n  } catch (error: any) {\n    const errorMessage = typeof error.message === 'string' ? error.message : 'An unexpected error occurred while fetching data.';\n    const errorCode = typeof error.code === 'string' ? error.code : 'UNKNOWN_FETCH_ERROR';\n    \n    console.error(\n      `[firestore-service - admin] Error fetching user Stroop sessions for userId: ${userId}. Code: ${errorCode}, Message: ${errorMessage}`,\n      { originalErrorObjectDetails: JSON.stringify(error, Object.getOwnPropertyNames(error)) }\n    );\n    \n    return { success: false, error: errorMessage };\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 322, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 370, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/firebase/hosting/src/components/stroop-test-game.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/firebase/hosting/src/components/stroop-test-game.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/firebase/hosting/src/components/stroop-test-game.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAwT,GACrV,sFACA","debugId":null}},
    {"offset": {"line": 384, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/firebase/hosting/src/components/stroop-test-game.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/firebase/hosting/src/components/stroop-test-game.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/firebase/hosting/src/components/stroop-test-game.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoS,GACjU,kEACA","debugId":null}},
    {"offset": {"line": 398, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 408, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/firebase/hosting/src/components/auth-button.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/firebase/hosting/src/components/auth-button.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/firebase/hosting/src/components/auth-button.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAmT,GAChV,iFACA","debugId":null}},
    {"offset": {"line": 422, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/firebase/hosting/src/components/auth-button.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/firebase/hosting/src/components/auth-button.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/firebase/hosting/src/components/auth-button.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+R,GAC5T,6DACA","debugId":null}},
    {"offset": {"line": 436, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 446, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/firebase/hosting/src/app/page.tsx"],"sourcesContent":["\nimport StroopTestGame from '@/components/stroop-test-game';\nimport AuthButton from '@/components/auth-button';\n\nexport default function HomePage() {\n  console.log(\">>>> DEBUG: RENDERING ACTUAL HOME PAGE - STROOP TEST CHALLENGE! Version 2 <<<<\");\n  return (\n    <main className=\"flex min-h-screen flex-col items-center p-4 sm:p-6 md:p-8\">\n      <div className=\"absolute top-4 right-4 sm:top-6 sm:right-6 md:top-8 md:right-8\">\n        <AuthButton />\n      </div>\n      <div className=\"flex flex-col items-center justify-center flex-grow\">\n        <div className=\"text-center mb-10\">\n          <h1 \n            className=\"text-5xl font-extrabold tracking-tight text-primary sm:text-6xl md:text-7xl\"\n            style={{ backgroundColor: 'yellow', padding: '0.5rem' }} \n          >\n            Stroop Test Challenge - Updated!\n          </h1>\n          <p className=\"mt-3 text-base text-muted-foreground sm:mt-5 sm:text-lg sm:max-w-xl sm:mx-auto md:mt-5 md:text-xl lg:mx-0\">\n            Test your cognitive flexibility!\n          </p>\n        </div>\n        <StroopTestGame />\n      </div>\n    </main>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;AACA;;;;AAEe,SAAS;IACtB,QAAQ,GAAG,CAAC;IACZ,qBACE,8OAAC;QAAK,WAAU;;0BACd,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC,2JAAA,CAAA,UAAU;;;;;;;;;;0BAEb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCACC,WAAU;gCACV,OAAO;oCAAE,iBAAiB;oCAAU,SAAS;gCAAS;0CACvD;;;;;;0CAGD,8OAAC;gCAAE,WAAU;0CAA4G;;;;;;;;;;;;kCAI3H,8OAAC,mKAAA,CAAA,UAAc;;;;;;;;;;;;;;;;;AAIvB","debugId":null}}]
}