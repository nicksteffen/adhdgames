{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/firebase/hosting/src/lib/firebase/config.ts"],"sourcesContent":["\n// Import the functions you need from the SDKs you need\nimport { initializeApp, getApp, getApps, type FirebaseApp } from \"firebase/app\";\nimport { getAuth, type Auth } from \"firebase/auth\";\nimport { getFirestore as getClientFirestore, type Firestore as ClientFirestore } from \"firebase/firestore\";\nimport { getAnalytics, type Analytics } from \"firebase/analytics\";\n\n// Client Firebase App Initialization\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCyIj3n7Ned3CycN1LuuNze0avQil8yjI8\",\n  authDomain: \"adhdgames-15570.firebaseapp.com\",\n  projectId: \"adhdgames-15570\",\n  storageBucket: \"adhdgames-15570.firebasestorage.app\",\n  messagingSenderId: \"32647423969\",\n  appId: \"1:32647423969:web:b72420acb51a82545754a0\",\n  measurementId: \"G-W5KQ1PX5B4\"\n};\n\nlet app: FirebaseApp;\nif (!getApps().length) {\n  app = initializeApp(firebaseConfig);\n} else {\n  app = getApp();\n}\n\nconst auth: Auth = getAuth(app);\nconst db: ClientFirestore = getClientFirestore(app); // This is the client Firestore instance\n\nlet analytics: Analytics | null = null;\nif (typeof window !== 'undefined') {\n  try {\n    analytics = getAnalytics(app);\n  } catch (error) {\n    console.error(\"[config.ts] Failed to initialize Firebase Analytics (client-side):\", error);\n  }\n}\n\n// Admin SDK - to be initialized and used only on the server\nlet adminAppInstance: import('firebase-admin/app').App | null = null;\nlet adminDbInstance: import('firebase-admin/firestore').Firestore | null = null;\nlet adminInitError: Error | null = null;\nlet adminInitializedAttempted = false;\n\nasync function initializeAdminSDK() {\n  if (typeof window !== 'undefined') {\n    console.warn(\"[config.ts] Attempted to initialize Firebase Admin SDK on the client. This is a misconfiguration and will be skipped.\");\n    adminInitError = new Error(\"Firebase Admin SDK cannot be initialized on the client.\");\n    adminInitializedAttempted = true; // Mark attempt even if skipped client-side\n    return;\n  }\n\n  if (adminInitializedAttempted) {\n    // console.log('[config.ts] Firebase Admin SDK initialization already attempted.');\n    if (adminInitError) throw adminInitError; \n    if (adminAppInstance && adminDbInstance) return; \n    if (!adminInitError && (!adminAppInstance || !adminDbInstance)) {\n        console.warn('[config.ts] Admin SDK was marked initialized but instances are missing. Re-attempting...');\n        // Resetting to allow re-attempt, this path should ideally not be hit often.\n        adminAppInstance = null;\n        adminDbInstance = null;\n        adminInitializedAttempted = false; \n    } else if (adminInitError) {\n        throw adminInitError;\n    } else {\n         return; // Successfully initialized previously\n    }\n  }\n  adminInitializedAttempted = true;\n\n  console.log('[config.ts] Attempting to initialize Firebase Admin SDK...');\n  console.log(`[config.ts] NODE_ENV: ${process.env.NODE_ENV}`);\n  if (process.env.NODE_ENV === 'development') {\n    console.log(`[config.ts] GOOGLE_APPLICATION_CREDENTIALS: ${process.env.GOOGLE_APPLICATION_CREDENTIALS ? 'Set - Path: ' + process.env.GOOGLE_APPLICATION_CREDENTIALS : 'Not Set'}`);\n    if (!process.env.GOOGLE_APPLICATION_CREDENTIALS) {\n      console.warn(`[config.ts] WARNING: GOOGLE_APPLICATION_CREDENTIALS environment variable is not set for local development. \n                    Firebase Admin SDK might not initialize correctly. \n                    You may see 'Could not refresh access token' or permission errors.\n                    Ensure the variable points to your service account JSON key file.\n                    See https://firebase.google.com/docs/admin/setup#initialize-sdk for setup instructions.`);\n    }\n  }\n\n  try {\n    const admin = (await import('firebase-admin')).default;\n    if (!admin.apps.length) {\n      console.log('[config.ts] No existing admin apps. Calling admin.initializeApp()...');\n      adminAppInstance = admin.initializeApp();\n      console.log('[config.ts] Firebase Admin SDK initialized successfully via initializeApp().');\n    } else {\n      adminAppInstance = admin.app();\n      console.log('[config.ts] Firebase Admin SDK already initialized, using existing app.');\n    }\n    adminDbInstance = adminAppInstance.firestore();\n    adminInitError = null;\n  } catch (error: any) {\n    console.error(\"[config.ts] CRITICAL: Firebase Admin SDK initialization failed:\", error.message, error.code, error.stack);\n    adminInitError = error; \n    throw error;\n  }\n}\n\nexport async function getAdminDb(): Promise<import('firebase-admin/firestore').Firestore> {\n  if (typeof window !== 'undefined') {\n    throw new Error(\"Firebase Admin SDK (getAdminDb) can only be used on the server.\");\n  }\n  if (!adminDbInstance || adminInitError) {\n    console.log('[config.ts] Admin DB instance not available or init error, ensuring Admin SDK is initialized for getAdminDb...');\n    await initializeAdminSDK(); // This will throw if init fails\n  }\n  if (!adminDbInstance) {\n    console.error(\"[config.ts] Admin DB instance is null after initialization attempt in getAdminDb.\");\n    throw new Error(\"Firebase Admin SDK Firestore instance could not be initialized or is not yet available after attempt.\");\n  }\n  return adminDbInstance;\n}\n\nexport async function getAdminApp(): Promise<import('firebase-admin/app').App> {\n  if (typeof window !== 'undefined') {\n    throw new Error(\"Firebase Admin SDK (getAdminApp) can only be used on the server.\");\n  }\n  if (!adminAppInstance || adminInitError) {\n    console.log('[config.ts] Admin App instance not available or init error, ensuring Admin SDK is initialized for getAdminApp...');\n    await initializeAdminSDK(); // This will throw if init fails\n  }\n  if (!adminAppInstance) {\n    console.error(\"[config.ts] Admin App instance is null after initialization attempt in getAdminApp.\");\n    throw new Error(\"Firebase Admin SDK App instance could not be initialized or is not yet available after attempt.\");\n  }\n  return adminAppInstance;\n}\n\n// Export client SDK instances directly\nexport { app, auth, db, analytics };\n"],"names":[],"mappings":"AACA,uDAAuD;;;;;;;;;AACvD;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;AAEA,qCAAqC;AACrC,MAAM,iBAAiB;IACrB,QAAQ;IACR,YAAY;IACZ,WAAW;IACX,eAAe;IACf,mBAAmB;IACnB,OAAO;IACP,eAAe;AACjB;AAEA,IAAI;AACJ,IAAI,CAAC,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;IACrB,MAAM,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE;AACtB,OAAO;IACL,MAAM,CAAA,GAAA,oLAAA,CAAA,SAAM,AAAD;AACb;AAEA,MAAM,OAAa,CAAA,GAAA,yOAAA,CAAA,UAAO,AAAD,EAAE;AAC3B,MAAM,KAAsB,CAAA,GAAA,iKAAA,CAAA,eAAkB,AAAD,EAAE,MAAM,wCAAwC;AAE7F,IAAI,YAA8B;AAClC,uCAAmC;;AAMnC;AAEA,4DAA4D;AAC5D,IAAI,mBAA4D;AAChE,IAAI,kBAAuE;AAC3E,IAAI,iBAA+B;AACnC,IAAI,4BAA4B;AAEhC,eAAe;IACb,uCAAmC;;IAKnC;IAEA,IAAI,2BAA2B;QAC7B,mFAAmF;QACnF,IAAI,gBAAgB,MAAM;QAC1B,IAAI,oBAAoB,iBAAiB;QACzC,IAAI,CAAC,kBAAkB,CAAC,CAAC,oBAAoB,CAAC,eAAe,GAAG;YAC5D,QAAQ,IAAI,CAAC;YACb,4EAA4E;YAC5E,mBAAmB;YACnB,kBAAkB;YAClB,4BAA4B;QAChC,OAAO,IAAI,gBAAgB;YACvB,MAAM;QACV,OAAO;YACF,QAAQ,sCAAsC;QACnD;IACF;IACA,4BAA4B;IAE5B,QAAQ,GAAG,CAAC;IACZ,QAAQ,GAAG,CAAC,CAAC,sBAAsB,mDAAwB;IAC3D,wCAA4C;QAC1C,QAAQ,GAAG,CAAC,CAAC,4CAA4C,EAAE,QAAQ,GAAG,CAAC,8BAA8B,GAAG,iBAAiB,QAAQ,GAAG,CAAC,8BAA8B,GAAG,WAAW;QACjL,IAAI,CAAC,QAAQ,GAAG,CAAC,8BAA8B,EAAE;YAC/C,QAAQ,IAAI,CAAC,CAAC;;;;2GAIuF,CAAC;QACxG;IACF;IAEA,IAAI;QACF,MAAM,QAAQ,CAAC,mIAA8B,EAAE,OAAO;QACtD,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,EAAE;YACtB,QAAQ,GAAG,CAAC;YACZ,mBAAmB,MAAM,aAAa;YACtC,QAAQ,GAAG,CAAC;QACd,OAAO;YACL,mBAAmB,MAAM,GAAG;YAC5B,QAAQ,GAAG,CAAC;QACd;QACA,kBAAkB,iBAAiB,SAAS;QAC5C,iBAAiB;IACnB,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,mEAAmE,MAAM,OAAO,EAAE,MAAM,IAAI,EAAE,MAAM,KAAK;QACvH,iBAAiB;QACjB,MAAM;IACR;AACF;AAEO,eAAe;IACpB,uCAAmC;;IAEnC;IACA,IAAI,CAAC,mBAAmB,gBAAgB;QACtC,QAAQ,GAAG,CAAC;QACZ,MAAM,sBAAsB,gCAAgC;IAC9D;IACA,IAAI,CAAC,iBAAiB;QACpB,QAAQ,KAAK,CAAC;QACd,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;AAEO,eAAe;IACpB,uCAAmC;;IAEnC;IACA,IAAI,CAAC,oBAAoB,gBAAgB;QACvC,QAAQ,GAAG,CAAC;QACZ,MAAM,sBAAsB,gCAAgC;IAC9D;IACA,IAAI,CAAC,kBAAkB;QACrB,QAAQ,KAAK,CAAC;QACd,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/firebase/hosting/src/lib/firebase/firestore-service.ts"],"sourcesContent":["\n'use server';\n\nimport { getAdminDb } from './config';\n// We might still need ClientTimestamp for type consistency if FetchedStroopSession is used by client components\n// that receive data originally fetched by the admin SDK.\nimport type { Timestamp as ClientTimestamp } from 'firebase/firestore';\nimport type { Timestamp as AdminTimestamp, DocumentData } from 'firebase-admin/firestore';\n\n\nexport interface RoundResultData {\n  roundId: string;\n  title: string;\n  score: number;\n  trials: number;\n  averageResponseTimeSeconds: number;\n}\n\nexport interface StroopSessionData {\n  userId: string;\n  timestamp: AdminTimestamp | Date; // Admin SDK handles Date conversion to its Timestamp\n  [key: string]: any;\n}\n\nexport interface FetchedStroopSession extends DocumentData {\n  id: string;\n  userId: string;\n  timestamp: AdminTimestamp | ClientTimestamp; // Can be either depending on where it's read/hydrated\n  [key: string]: any;\n}\n\nexport async function saveStroopSession(\n  userId: string,\n  sessionData: Omit<StroopSessionData, 'userId' | 'timestamp'> & { timestamp: Date }\n): Promise<{ success: boolean; error?: any; sessionId?: string }> {\n  console.log(`[firestore-service - admin] saveStroopSession called for userId: ${userId}.`);\n  if (!userId) {\n    console.error('[firestore-service - admin] User ID is required to save session.');\n    return { success: false, error: 'User ID is required.' };\n  }\n  try {\n    const adminDbInstance = await getAdminDb(); // Get adminDb instance\n    const sessionToSave: StroopSessionData = {\n      ...sessionData,\n      userId,\n      timestamp: sessionData.timestamp, // Pass JS Date; Admin SDK converts it\n    };\n    // Log the data being sent, excluding potentially large objects if necessary, but userId and timestamp are key\n    console.log(`[firestore-service - admin] Attempting to save session for userId: ${userId}. Data (excluding large fields for brevity):`, \n      { userId: sessionToSave.userId, timestamp: sessionToSave.timestamp, round1Id: sessionToSave.round1Id, round2Id: sessionToSave.round2Id }\n    );\n    \n    const docRef = await adminDbInstance.collection('users').doc(userId).collection('stroopSessions').add(sessionToSave);\n    console.log(`[firestore-service - admin] Session saved successfully for userId: ${userId}, sessionId: ${docRef.id}`);\n    return { success: true, sessionId: docRef.id };\n  } catch (error: any) {\n    console.error(`[firestore-service - admin] Error saving Stroop session for userId: ${userId}. Error:`, error.message, error.stack, error.code, error.details);\n    const clientError: { message: string; code?: string; details?: string } = {\n      message: typeof error.message === 'string' ? error.message : 'Failed to save session.',\n      code: typeof error.code === 'string' ? error.code : 'UNKNOWN_SAVE_ERROR',\n      details: error.details || (error.toString ? error.toString() : \"No additional details\")\n    };\n    return { success: false, error: clientError };\n  }\n}\n\nexport async function getUserStroopSessions(\n  userId: string\n): Promise<{ success: boolean; data?: FetchedStroopSession[]; error?: string }> { \n  console.log('[firestore-service - admin] getUserStroopSessions called for userId:', userId);\n  if (!userId) {\n    console.error('[firestore-service - admin] User ID is required to fetch sessions.');\n     return { success: false, error: 'User ID is required.' };\n  }\n  try {\n    const adminDbInstance = await getAdminDb(); // Get adminDb instance\n    const sessionsColRef = adminDbInstance.collection('users').doc(userId).collection('stroopSessions');\n    const q = sessionsColRef.orderBy('timestamp', 'desc');\n    console.log('[firestore-service - admin] Executing query for path:', `users/${userId}/stroopSessions with orderBy timestamp desc`);\n    \n    const querySnapshot = await q.get();\n    console.log(`[firestore-service - admin] Query snapshot received. Empty: ${querySnapshot.empty}. Size: ${querySnapshot.size}`);\n    \n    const sessions: FetchedStroopSession[] = [];\n    querySnapshot.forEach((doc) => {\n      const docData = doc.data();\n      // Data from Admin SDK will have AdminTimestamps.\n      // The FetchedStroopSession type allows for AdminTimestamp.\n      sessions.push({\n        id: doc.id,\n        ...docData,\n        timestamp: docData.timestamp as AdminTimestamp, // Explicit cast for clarity\n      } as FetchedStroopSession); // Final cast to ensure type alignment\n    });\n    console.log(`[firestore-service - admin] Fetched ${sessions.length} sessions for userId: ${userId}`);\n    return { success: true, data: sessions };\n  } catch (error: any) {\n    const errorMessage = typeof error.message === 'string' ? error.message : 'An unexpected error occurred while fetching data.';\n    const errorCode = typeof error.code === 'string' ? error.code : 'UNKNOWN_FETCH_ERROR';\n    \n    console.error(\n      `[firestore-service - admin] Error fetching user Stroop sessions for userId: ${userId}. Code: ${errorCode}, Message: ${errorMessage}`,\n      { originalErrorObjectDetails: JSON.stringify(error, Object.getOwnPropertyNames(error)) }\n    );\n    \n    return { success: false, error: errorMessage };\n  }\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 362, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/firebase/hosting/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { db, getAdminDb } from '@/lib/firebase/config'; \nimport { getUserStroopSessions, saveStroopSession, type FetchedStroopSession, type StroopSessionData } from '@/lib/firebase/firestore-service';\n\n// This function is for the /firebase/hosting/src/app/actions.ts\n// It will be called by /firebase/hosting/src/app/dashboard/page.tsx or /firebase/hosting/src/app/test-page/page.tsx\nexport async function fetchUserSessions(userId: string | undefined): Promise<{\n  success: boolean;\n  data?: FetchedStroopSession[];\n  error?: string;\n}> {\n  console.log('[firebase/hosting/src/app/actions.ts] fetchUserSessions server action hit. Received userId:', userId);\n  if (!userId) {\n    console.error('[firebase/hosting/src/app/actions.ts] fetchUserSessions: No userId provided.');\n    return { success: false, error: 'User not authenticated or userId not provided for fetchUserSessions.' };\n  }\n  \n  try {\n    const result = await getUserStroopSessions(userId);\n    console.log('[firebase/hosting/src/app/actions.ts] getUserStroopSessions result from service (for fetchUserSessions):', result.success, result.data?.length, result.error);\n    return result; \n  } catch (error: any) {\n    console.error('[firebase/hosting/src/app/actions.ts] Error in fetchUserSessions calling getUserStroopSessions:', error);\n    const errorMessage = typeof error.message === 'string' ? error.message : 'An unexpected server error occurred in fetchUserSessions.';\n    return { success: false, error: errorMessage };\n  }\n}\n\n// This function is also for /firebase/hosting/src/app/actions.ts\n// Called by /firebase/hosting/src/app/test-page/page.tsx\nexport async function fetchTestDataForUser(userId: string | undefined): Promise<{\n  success: boolean;\n  data?: FetchedStroopSession[];\n  error?: string;\n}> {\n  console.log('[firebase/hosting/src/app/actions.ts] fetchTestDataForUser server action hit. Received userId:', userId);\n  if (!userId) {\n    console.error('[firebase/hosting/src/app/actions.ts] fetchTestDataForUser: No userId provided.');\n    return { success: false, error: 'User not authenticated or userId not provided for fetchTestDataForUser.' };\n  }\n  \n  try {\n    const result = await getUserStroopSessions(userId);\n    console.log('[firebase/hosting/src/app/actions.ts] getUserStroopSessions result from service (for fetchTestDataForUser):', result.success, result.data?.length, result.error);\n    return result;\n  } catch (error: any) {\n    console.error('[firebase/hosting/src/app/actions.ts] Error in fetchTestDataForUser calling getUserStroopSessions:', error);\n    const errorMessage = typeof error.message === 'string' ? error.message : 'An unexpected server error occurred in fetchTestDataForUser.';\n    return { success: false, error: errorMessage };\n  }\n}\n\nexport async function addMockStroopSessionForUser(userId: string | undefined): Promise<{\n  success: boolean;\n  error?: string;\n  sessionId?: string;\n}> {\n  console.log('[firebase/hosting/src/app/actions.ts] addMockStroopSessionForUser server action hit. Received userId:', userId);\n  if (!userId) {\n    console.error('[firebase/hosting/src/app/actions.ts] addMockStroopSessionForUser: No userId provided.');\n    return { success: false, error: 'User not authenticated or userId not provided.' };\n  }\n\n  const mockSessionData: Omit<StroopSessionData, 'userId' | 'timestamp'> & { timestamp: Date } = {\n    timestamp: new Date(),\n    // Round 1 Data\n    round1Id: \"wordMatch\",\n    round1Title: \"Mock Round 1: Match Word Meaning\",\n    round1Score: Math.floor(Math.random() * 18) + 7, // Score between 7-24\n    round1Trials: 25 + Math.floor(Math.random() * 6), // Trials between 25-30\n    round1AverageResponseTimeSeconds: parseFloat((Math.random() * 1.2 + 0.6).toFixed(2)), // Avg time 0.6s-1.8s\n    \n    // Round 2 Data\n    round2Id: \"colorMatch\",\n    round2Title: \"Mock Round 2: Match Font Color\",\n    round2Score: Math.floor(Math.random() * 15) + 5, // Score between 5-19\n    round2Trials: 20 + Math.floor(Math.random() * 6), // Trials between 20-25\n    round2AverageResponseTimeSeconds: parseFloat((Math.random() * 1.8 + 0.8).toFixed(2)), // Avg time 0.8s-2.6s\n    \n    overallAccuracy: Math.random(), \n    totalGameTimeSeconds: Math.floor(Math.random() * 60) + 120, \n  };\n\n  try {\n    const result = await saveStroopSession(userId, mockSessionData);\n    if (result.success) {\n      console.log(`[firebase/hosting/src/app/actions.ts] Mock session ${result.sessionId} added for user ${userId}`);\n    } else {\n      console.error(`[firebase/hosting/src/app/actions.ts] Failed to add mock session for user ${userId}:`, result.error);\n    }\n    return result;\n  } catch (error: any) {\n    console.error(`[firebase/hosting/src/app/actions.ts] Error in addMockStroopSessionForUser calling saveStroopSession for user ${userId}:`, error);\n    const errorMessage = typeof error.message === 'string' ? error.message : 'An unexpected server error occurred.';\n    return { success: false, error: errorMessage };\n  }\n}\n\nexport async function testAdminSDKConnection(): Promise<{ success: boolean; message: string; data?: any }> {\n  console.log('[actions.ts] testAdminSDKConnection server action hit.');\n  try {\n    const adminDb = await getAdminDb();\n    // Corrected collection and document IDs\n    const testDocRef = adminDb.collection('adminSdkTestCollection').doc('adminSdkTestDoc');\n    await testDocRef.get(); \n    console.log('[actions.ts] Admin SDK connection test: Successfully performed a Firestore get operation with non-reserved names.');\n    return { success: true, message: 'Admin SDK connected and performed a test Firestore read successfully.' };\n  } catch (error: any) {\n    console.error('[actions.ts] Admin SDK connection test FAILED:');\n    console.error(`  Message: ${error.message}`);\n    if (error.code) console.error(`  Code: ${error.code}`);\n    if (error.stack) console.error(`  Stack: ${error.stack}`);\n    \n    let clientErrorMessage = 'Admin SDK connection test failed.';\n    if (error.message) clientErrorMessage += ` Message: ${error.message}`;\n    if (error.code) clientErrorMessage += ` Code: ${error.code}`;\n    \n    let errorDetails = {};\n    try {\n      errorDetails = JSON.parse(JSON.stringify(error, Object.getOwnPropertyNames(error)));\n    } catch (e) {\n      errorDetails = { message: \"Could not serialize full error object.\" };\n    }\n\n    return { \n      success: false, \n      message: clientErrorMessage,\n      data: { errorDetails } \n    };\n  }\n}\n"],"names":[],"mappings":";;;;;;;;AAGA;AACA;;;;;;AAIO,eAAe,uCAAe,GAAf,kBAAkB,MAA0B;IAKhE,QAAQ,GAAG,CAAC,+FAA+F;IAC3G,IAAI,CAAC,QAAQ;QACX,QAAQ,KAAK,CAAC;QACd,OAAO;YAAE,SAAS;YAAO,OAAO;QAAuE;IACzG;IAEA,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,qKAAA,CAAA,wBAAqB,AAAD,EAAE;QAC3C,QAAQ,GAAG,CAAC,4GAA4G,OAAO,OAAO,EAAE,OAAO,IAAI,EAAE,QAAQ,OAAO,KAAK;QACzK,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,mGAAmG;QACjH,MAAM,eAAe,OAAO,MAAM,OAAO,KAAK,WAAW,MAAM,OAAO,GAAG;QACzE,OAAO;YAAE,SAAS;YAAO,OAAO;QAAa;IAC/C;AACF;AAIO,eAAe,uCAAkB,GAAlB,qBAAqB,MAA0B;IAKnE,QAAQ,GAAG,CAAC,kGAAkG;IAC9G,IAAI,CAAC,QAAQ;QACX,QAAQ,KAAK,CAAC;QACd,OAAO;YAAE,SAAS;YAAO,OAAO;QAA0E;IAC5G;IAEA,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,qKAAA,CAAA,wBAAqB,AAAD,EAAE;QAC3C,QAAQ,GAAG,CAAC,+GAA+G,OAAO,OAAO,EAAE,OAAO,IAAI,EAAE,QAAQ,OAAO,KAAK;QAC5K,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,sGAAsG;QACpH,MAAM,eAAe,OAAO,MAAM,OAAO,KAAK,WAAW,MAAM,OAAO,GAAG;QACzE,OAAO;YAAE,SAAS;YAAO,OAAO;QAAa;IAC/C;AACF;AAEO,eAAe,uCAAyB,GAAzB,4BAA4B,MAA0B;IAK1E,QAAQ,GAAG,CAAC,yGAAyG;IACrH,IAAI,CAAC,QAAQ;QACX,QAAQ,KAAK,CAAC;QACd,OAAO;YAAE,SAAS;YAAO,OAAO;QAAiD;IACnF;IAEA,MAAM,kBAAyF;QAC7F,WAAW,IAAI;QACf,eAAe;QACf,UAAU;QACV,aAAa;QACb,aAAa,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,MAAM;QAC9C,cAAc,KAAK,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK;QAC9C,kCAAkC,WAAW,CAAC,KAAK,MAAM,KAAK,MAAM,GAAG,EAAE,OAAO,CAAC;QAEjF,eAAe;QACf,UAAU;QACV,aAAa;QACb,aAAa,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,MAAM;QAC9C,cAAc,KAAK,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK;QAC9C,kCAAkC,WAAW,CAAC,KAAK,MAAM,KAAK,MAAM,GAAG,EAAE,OAAO,CAAC;QAEjF,iBAAiB,KAAK,MAAM;QAC5B,sBAAsB,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,MAAM;IACzD;IAEA,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,qKAAA,CAAA,oBAAiB,AAAD,EAAE,QAAQ;QAC/C,IAAI,OAAO,OAAO,EAAE;YAClB,QAAQ,GAAG,CAAC,CAAC,mDAAmD,EAAE,OAAO,SAAS,CAAC,gBAAgB,EAAE,QAAQ;QAC/G,OAAO;YACL,QAAQ,KAAK,CAAC,CAAC,0EAA0E,EAAE,OAAO,CAAC,CAAC,EAAE,OAAO,KAAK;QACpH;QACA,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,CAAC,8GAA8G,EAAE,OAAO,CAAC,CAAC,EAAE;QAC1I,MAAM,eAAe,OAAO,MAAM,OAAO,KAAK,WAAW,MAAM,OAAO,GAAG;QACzE,OAAO;YAAE,SAAS;YAAO,OAAO;QAAa;IAC/C;AACF;AAEO,eAAe,uCAAoB,GAApB;IACpB,QAAQ,GAAG,CAAC;IACZ,IAAI;QACF,MAAM,UAAU,MAAM,CAAA,GAAA,uJAAA,CAAA,aAAU,AAAD;QAC/B,wCAAwC;QACxC,MAAM,aAAa,QAAQ,UAAU,CAAC,0BAA0B,GAAG,CAAC;QACpE,MAAM,WAAW,GAAG;QACpB,QAAQ,GAAG,CAAC;QACZ,OAAO;YAAE,SAAS;YAAM,SAAS;QAAwE;IAC3G,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC;QACd,QAAQ,KAAK,CAAC,CAAC,WAAW,EAAE,MAAM,OAAO,EAAE;QAC3C,IAAI,MAAM,IAAI,EAAE,QAAQ,KAAK,CAAC,CAAC,QAAQ,EAAE,MAAM,IAAI,EAAE;QACrD,IAAI,MAAM,KAAK,EAAE,QAAQ,KAAK,CAAC,CAAC,SAAS,EAAE,MAAM,KAAK,EAAE;QAExD,IAAI,qBAAqB;QACzB,IAAI,MAAM,OAAO,EAAE,sBAAsB,CAAC,UAAU,EAAE,MAAM,OAAO,EAAE;QACrE,IAAI,MAAM,IAAI,EAAE,sBAAsB,CAAC,OAAO,EAAE,MAAM,IAAI,EAAE;QAE5D,IAAI,eAAe,CAAC;QACpB,IAAI;YACF,eAAe,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,OAAO,OAAO,mBAAmB,CAAC;QAC7E,EAAE,OAAO,GAAG;YACV,eAAe;gBAAE,SAAS;YAAyC;QACrE;QAEA,OAAO;YACL,SAAS;YACT,SAAS;YACT,MAAM;gBAAE;YAAa;QACvB;IACF;AACF;;;IA5HsB;IAwBA;IAsBA;IA8CA;;AA5FA,+OAAA;AAwBA,+OAAA;AAsBA,+OAAA;AA8CA,+OAAA","debugId":null}},
    {"offset": {"line": 518, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 572, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/firebase/hosting/src/app/test-page/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/firebase/hosting/src/app/test-page/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/firebase/hosting/src/app/test-page/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+S,GAC5U,6EACA","debugId":null}},
    {"offset": {"line": 586, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/firebase/hosting/src/app/test-page/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/firebase/hosting/src/app/test-page/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/firebase/hosting/src/app/test-page/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2R,GACxT,yDACA","debugId":null}},
    {"offset": {"line": 600, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}